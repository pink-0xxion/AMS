@model AMS.Models.ViewModel.EmployeeDetailsViewModel

@{
	ViewData["Title"] = "Employee Details";
	var employee = Model.Employee;
	var records = Model.AttendanceRecord;
	var monthYear = records?.FirstOrDefault()?.AttendanceDate.ToString("MMMM yyyy"); // null-conditional operators (?.) 
}

@*
<h2>Employee Details</h2>

<div class="card mb-4 p-3">
    <h4>@employee.FirstName</h4>
    <p><strong>Email:</strong> @employee.Email</p>
    <p><strong>Department:</strong> @employee.Department</p>
    <p><strong>Designation:</strong> @employee.Designation</p>
</div>

*@

<div class="card shadow-lg mb-4 border-primary">
	<div class="d-flex justify-content-between align-items-center card-header bg-primary text-white">
		<h2 class="mb-0"><i class="fas fa-user"></i> Employee Details</h2>
		@* <a class="btn btn-danger" asp-controller="DashBoard" asp-action="DownloadPdf" asp-route-id="@employee.EmployeeId">
			<i class="fas fa-file-pdf"></i> Download PDF
		</a> *@
		<a class="btn btn-warning" asp-controller="Dashboard" asp-action="DownloadQuestPdf" asp-route-id="@employee.EmployeeId">
			<i class="fas fa-file-pdf"></i> Download QuestPDF
		</a>
	</div>
	<div class="card-body">
		<h4 class="mb-3 text-primary"><i class="fas fa-id-badge"></i>  @($"{employee.FirstName} {employee.LastName}")</h4>
		<p><i class="fas fa-envelope"></i> <strong>Email:</strong> @employee.Email</p>
		<p><i class="fas fa-building"></i> <strong>Department:</strong> @employee.Department</p>
		<p><i class="fas fa-briefcase"></i> <strong>Designation:</strong> @employee.Designation</p>
	</div>
</div>

<hr />

@* <h3>Attendance Record</h3> *@
<h3 class="text-secondary mb-3">
	<i class="fas fa-calendar-check"></i> Attendance Record 
	@if (!string.IsNullOrEmpty(monthYear))
	{
			<span class="text-primary">(@monthYear)</span>
	}
</h3>
@if (records != null && records.Any())
{
	@* For Scrolling, Instead you can add paggination*@
	<div style="max-height: 400px; overflow-y: auto;">
		@* <table class="table table-bordered"> *@
		@*     <thead> *@
		<table class="table table-bordered table-striped shadow-sm">
			<thead class="table-head">
				<tr>
					@*
					<th>Date</th>
                    <th>Check-In Time</th>
                    <th>Check-Out Time</th>
                    <th>Total Hours</th>
                    *@
					<th><i class="fas fa-calendar-day"></i> Date</th>
					<th><i class="fas fa-sign-in-alt"></i> Check-In</th>
					<th><i class="fas fa-sign-out-alt"></i> Check-Out</th>
					<th><i class="fas fa-hourglass-half"></i> Total Hours</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var attendance in records)
				{


					@* TimeSpan? totalHours = (attendance.CheckOutTime.HasValue && attendance.CheckInTime.HasValue) *@
					@* ? (TimeSpan?)(attendance.CheckOutTime.Value - attendance.CheckInTime.Value) *@
					@* : null; *@

					@* You should  use .HasValue on only on TimeSpan? or TimeOnly? (nullable). *@
					@* You should  use .Value on only on TimeSpan? or TimeOnly? (nullable). *@

					@* DateOnly does not support AM/PM or time formats — it only represents the date (year, month, day).
                  To display AM/PM (i.e., time), use TimeOnly or DateTime *@

					TimeSpan? totalHours = attendance.CheckOutTime.HasValue
					? attendance.CheckOutTime.Value - attendance.CheckInTime
					: null;

					<tr>
						@* <td>@attendance.AttendanceDate.ToString("dd MMM yyyy")</td> *@
						@* <td>@attendance.CheckInTime.ToString(@"hh\:mm") </td> *@
						@* <td>@attendance.CheckOutTime?.ToString(@"hh\:mm")  </td> *@


						@* <td>@attendance.AttendanceDate.ToString("dd MMM yyyy")</td> *@
						@* <td>@attendance.CheckInTime.ToString("hh\\:mm tt")</td> *@
						@* <td>@(attendance.CheckOutTime.HasValue ? attendance.CheckOutTime.Value.ToString("hh\\:mm tt") : "--")</td> *@
						@* <td> *@
						@*     @if (totalHours.HasValue) *@
						@*     { *@
						@*         @string.Format("{0:%h}h {0:%m}m", totalHours.Value) *@
						@*     } *@
						@*     else *@
						@*     { *@
						@*         <text>--</text> *@
						@*     } *@
						@* </td> *@

						<td>@attendance.AttendanceDate.ToString("dd MMM yyyy")</td>

						<td>
							<span class="badge bg-success">
								@DateTime.Today.Add(attendance.CheckInTime).ToString("hh:mm tt")
							</span>
						</td>
						<td>
							@if (attendance.CheckOutTime.HasValue)
							{
								<span class="badge bg-danger">
									@DateTime.Today.Add(attendance.CheckOutTime.Value).ToString("hh:mm tt")
								</span>
							}
							else
							{
								<span class="text-muted">--</span>
							}
						</td>
						<td>
							@if (totalHours.HasValue)
							{
								<span class="badge bg-info text-dark">
									@($"{totalHours.Value.Hours}h {totalHours.Value.Minutes}m")
								</span>
							}
							else
							{
								<span class="text-muted">--</span>
							}
						</td>
					</tr>
				}
			</tbody>
		</table>
	</div>
}
else
{
	<div class="alert alert-warning">
		<i class="fas fa-exclamation-circle"></i> No attendance records found for this employee.
	</div>
}

<a class="btn btn-outline-primary mt-3" asp-controller="Attendance" asp-action="Index" asp-area="">
	<i class="fas fa-arrow-left"></i>
	Back to Attendance Sheet
</a>

@* 
<p>
	<i class="fas fa-map-marker-alt text-danger"></i>
	Checked in from:
	<a href="https://www.google.com/maps?q=23.3881206,85.3065027" target="_blank">
		View Location on Google Maps
	</a>
</p>
 *@

@* <hr class="mt-5" /> *@
@* <p class="mt-3"> *@
@* 	<strong>Signature:</strong> ____________________________ *@
@* </p> *@




@* <script> *@
@*     const employeeDetailsBaseUrl = '/Admin/Dashboard/EmployeeDetails/__ID__'; *@
@* </script> *@

